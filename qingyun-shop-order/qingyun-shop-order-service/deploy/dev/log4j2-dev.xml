<?xml version="1.0" encoding="UTF-8"?>
<!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->
<!--Configuration后面的status,这个用于设置log4j2自身内部的信息输出,可以不设置,当设置成trace时,你会看到log4j2内部各种详细输出-->
<!--monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身,设置间隔秒数，如下配置为30分钟检测一次-->
<Configuration status="WARN" monitorInterval="3600">

	<Properties>
		<!-- ==============================================公共配置============================================== -->
		<!-- 设置日志文件的目录名称 -->
<!--		<property name="LOG_HOME" value="${sys:catalina.home}/logs/"/>-->

		<!-- 日志默认存放的位置,可以设置为项目根路径下,也可指定绝对路径 -->
		<!-- 存放路径一:通用路径,window平台 -->
		 <property name="LOG_HOME">e:/logs/${spring.application.name}</property>
		<!-- 存放路径二:web工程专用,java项目没有这个变量,需要删掉,否则会报异常,这里把日志放在web项目的根目录下 -->
		<!-- <property name="LOG_HOME">${web:rootDir}/${logFileName}</property> -->
		<!-- 存放路径三:web工程专用,java项目没有这个变量,需要删掉,否则会报异常,这里把日志放在tocmat的logs目录下 -->
		<!--<property name="LOG_HOME">${sys:catalina.home}/logs/${logFileName}</property>-->

		<!-- 控制台默认输出格式,%clr{} 带上颜色,"%-5level":日志级别,"%l":输出完整的错误位置,是小写的L,因为有行号显示,所以影响日志输出的性能 -->
		<!--<property name="LOG_PATTERN">%d{yyyy-MM-dd HH:mm:ss.SSS} %clr{%5p}  ${sys:PID}-[%t] %l %30c{1.}.%M%clr{(%F:%L)}:%m%n </property>-->
		<property name="LOG_PATTERN">%d{yyyy-MM-dd HH:mm:ss.SSS} %5p ${sys:PID} %t %l:%m%n</property>
		<property name="LOG_PATTERN_COLOR">%d{yyyy-MM-dd HH:mm:ss.SSS} %clr{%5p} %clr{${sys:PID}}{magenta}  %clr{[%15.15t]} %clr{%-40.40c{1.}}{cyan}:%m%n</property>
		<!--<property name="LOG_PATTERN">%clr{%d{yyyy-MM-dd HH:mm:ss.SSS}}{faint} %clr{%5p} %clr{${sys:PID}}{magenta} %clr{-&#45;&#45;}{faint} %clr{[.15t]}{faint} %clr{%-40.40c{1.}}{cyan} %clr{:}{faint} %m%n%xwEx</property>-->
		<!--<property name="COLOR_PATTERN">%highlight{%d{HH:mm:ss.SSS} %-5level %logger{36}.%M() @%L - %msg%n}{FATAL=red blink, ERROR=red, WARN=yellow bold, INFO=black, DEBUG=green bold, TRACE=blue}</property>-->
		<!-- 日志文件默认输出格式,不带行号输出(行号显示会影响日志输出性能);%C:大写,类名;%M:方法名;%m:错误信息;%n:换行 -->
		<!-- <property name="log_pattern">%d{yyyy-MM-dd HH:mm:ss.SSS} [%-5level] %C.%M - %m%n</property> -->
		<!-- 日志文件默认输出格式,另类带行号输出(对日志输出性能未知);%C:大写,类名;%M:方法名;%L:行号;%m:错误信息;%n:换行 -->
		<!--<property name="log_pattern">%d{yyyy-MM-dd HH:mm:ss.SSS} [%-5level] %C.%M[%L line] - %m%n</property>-->

		<!-- 日志默认切割的最小单位 -->
		<property name="EVERY_FILE_SIZE">1GB</property>
		<!-- 日志默认输出级别 -->
		<property name="OUTPUT_LOG_LEVEL">INFO</property>

		<!-- ===========================================所有级别日志配置=========================================== -->
		<!-- 日志默认存放路径(所有级别日志) -->
		<property name="ROLLING_FILENAME">${LOG_HOME}/all.log</property>
		<!-- 日志默认压缩路径,将超过指定文件大小的日志,自动存入按"年月"建立的文件夹下面并进行压缩,作为存档 -->
		<property name="ROLLING_FILEPATTERN">${LOG_HOME}/%d{yyyy-MM}/all-%d{yyyy-MM-dd}-%i.log.gz</property>
		<!-- 日志默认同类型日志,同一文件夹下可以存放的数量,不设置此属性则默认为7个,filePattern最后要带%i才会生效 -->
		<property name="ROLLING_MAX">30</property>
		<!-- 日志默认同类型日志,多久生成一个新的日志文件,这个配置需要和filePattern结合使用，默认为1;
                如果设置为1,filePattern是%d{yyyy-MM-dd}到天的格式,则间隔一天生成一个文件
                如果设置为12,filePattern是%d{yyyy-MM-dd-HH}到小时的格式,则间隔12小时生成一个文件 -->
		<property name="ROLLING_TIME_INTERVAL">1</property>

		<!-- ============================================Info级别日志============================================ -->
		<!-- Info日志默认存放路径(Info级别日志) -->
		<property name="INFO_FILENAME">${LOG_HOME}/info.log</property>
		<!-- Info日志默认压缩路径,将超过指定文件大小的日志,自动存入按"年月"建立的文件夹下面并进行压缩,作为存档 -->
		<property name="INFO_FILEPATTERN">${LOG_HOME}/%d{yyyy-MM}/info-%d{yyyy-MM-dd}-%i.log.gz</property>
		<!-- ============================================Warn级别日志============================================ -->
		<!-- Warn日志默认存放路径(Warn级别日志) -->
		<property name="WARN_FILENAME">${LOG_HOME}/warn.log</property>
		<!-- Warn日志默认压缩路径,将超过指定文件大小的日志,自动存入按"年月"建立的文件夹下面并进行压缩,作为存档 -->
		<property name="WARN_FILEPATTERN">${LOG_HOME}/%d{yyyy-MM}/warn-%d{yyyy-MM-dd}-%i.log.gz</property>
		<!-- Warn日志默认同一文件夹下可以存放的数量,不设置此属性则默认为7个 -->
		<!-- ============================================Error级别日志============================================ -->
		<!-- Error日志默认存放路径(Error级别日志) -->
		<property name="ERROR_FILENAME">${LOG_HOME}/error.log</property>
		<!-- Error日志默认压缩路径,将超过指定文件大小的日志,自动存入按"年月"建立的文件夹下面并进行压缩,作为存档 -->
		<property name="ERROR_FILEPATTERN">${LOG_HOME}/%d{yyyy-MM}/error-%d{yyyy-MM-dd}-%i.log.gz</property>

		<!-- ============================================控制台显示控制============================================ -->
		<!-- 控制台显示的日志最低级别 -->
		<property name="CONSOLE_PRINT_LEVEL">DEBUG</property>

	</Properties>

	<!--定义appender -->
	<Appenders>
		<!-- =======================================用来定义输出到控制台的配置======================================= -->
		<Console name="Console" target="SYSTEM_OUT">
			<!-- 设置输出格式,不设置默认为:%m%n -->
			<PatternLayout pattern="${LOG_PATTERN_COLOR}"/>
		</Console>

		<!-- =======================================打印INFO级别的日志到文件======================================= -->
		<RollingRandomAccessFile name="InfoFile" fileName="${INFO_FILENAME}" filePattern="${INFO_FILEPATTERN}">
			<PatternLayout pattern="${LOG_PATTERN}"/>
			<Policies>
				<TimeBasedTriggeringPolicy interval="1" modulate="true"/>
				<SizeBasedTriggeringPolicy size="${EVERY_FILE_SIZE}"/>
			</Policies>
			<DefaultRolloverStrategy max="${ROLLING_MAX}"/>
			<Filters>
				<ThresholdFilter level="WARN" onMatch="DENY" onMismatch="NEUTRAL"/>
				<ThresholdFilter level="INFO" onMatch="ACCEPT" onMismatch="DENY"/>
			</Filters>
		</RollingRandomAccessFile>

		<!-- =======================================打印WARN级别的日志到文件======================================= -->
		<RollingRandomAccessFile name="WarnFile" fileName="${WARN_FILENAME}" filePattern="${WARN_FILEPATTERN}">
			<PatternLayout pattern="${LOG_PATTERN}"/>
			<Policies>
				<TimeBasedTriggeringPolicy interval="1" modulate="true"/>
				<SizeBasedTriggeringPolicy size="${EVERY_FILE_SIZE}"/>
			</Policies>
			<DefaultRolloverStrategy max="${ROLLING_MAX}"/>
			<Filters>
				<ThresholdFilter level="ERROR" onMatch="DENY" onMismatch="NEUTRAL"/>
				<ThresholdFilter level="WARN" onMatch="ACCEPT" onMismatch="DENY"/>
			</Filters>
		</RollingRandomAccessFile>

		<!-- =======================================打印ERROR级别的日志到文件======================================= -->
		<RollingRandomAccessFile name="ErrorFile" fileName="${ERROR_FILENAME}" filePattern="${ERROR_FILEPATTERN}">
			<PatternLayout pattern="${LOG_PATTERN}"/>
			<Policies>
				<TimeBasedTriggeringPolicy interval="1" modulate="true"/>
				<SizeBasedTriggeringPolicy size="${EVERY_FILE_SIZE}"/>
			</Policies>
			<DefaultRolloverStrategy max="${ROLLING_MAX}"/>
			<Filters>
				<ThresholdFilter level="FATAL" onMatch="DENY" onMismatch="NEUTRAL"/>
				<ThresholdFilter level="ERROR" onMatch="ACCEPT" onMismatch="DENY"/>
			</Filters>
		</RollingRandomAccessFile>
	</Appenders>

	<!--定义logger,只有定义了logger并引入的appender,appender才会生效-->
	<Loggers>
		<!--level指定级别，additivity表示是否向上传递打印日志信息（若为true则向上传递，那么root根对象也会进行日志打印-->
		<Logger name="com.mayezi.log4j2.Log4jSpringBootApplication" level="INFO" additivity="false">
			<AppenderRef ref="Console"/>
		</Logger>
		<!--建立一个默认的root的logger-->
		<Root level="INFO">
			<AppenderRef ref="Console"/>
			<AppenderRef ref="InfoFile"/>
			<AppenderRef ref="WarnFile"/>
			<AppenderRef ref="ErrorFile"/>
		</Root>
	</Loggers>

</Configuration>
